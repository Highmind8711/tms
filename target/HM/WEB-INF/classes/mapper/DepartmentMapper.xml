<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.highmind.dao.DepartmentMapper">
  <resultMap id="BaseResultMap" type="com.highmind.entity.Department">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="domainId" jdbcType="BIGINT" property="domainId" />
    <result column="ml_parent" jdbcType="BIGINT" property="ml_parent" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="remark" jdbcType="VARCHAR" property="remark" />
    <collection property="employees"  ofType="com.highmind.entity.Employee">
        <id column="Eid" jdbcType="BIGINT" property="id" />
	    <result column="domainId" jdbcType="BIGINT" property="domainId" />
	    <result column="name" jdbcType="VARCHAR" property="name" />
	    <result column="email" jdbcType="VARCHAR" property="email" />
	    <result column="department_id" jdbcType="BIGINT" property="department_id" />
	    <result column="loginId" jdbcType="VARCHAR" property="loginId" />
	    <result column="isLoginEnabled" jdbcType="TINYINT" property="isLoginEnabled" />
	    <result column="birthday" jdbcType="TIMESTAMP" property="birthday" />
	    <result column="msn" jdbcType="VARCHAR" property="msn" />
	    <result column="qq" jdbcType="VARCHAR" property="qq" />
	    <result column="sex" jdbcType="BIGINT" property="sex" />
	    <result column="photo" jdbcType="VARCHAR" property="photo" />
	    <result column="password" jdbcType="VARCHAR" property="password"/>
    </collection>
  </resultMap>
  <sql id="Base_Column_List">
    Sys_Department.id as 'id', Sys_Department.domainId , Sys_Department.ml_parent, Sys_Department.name, Sys_Department.remark
  </sql>
  <select id="selectDepartment" parameterType="Map" resultMap="BaseResultMap">
	select 
    <include refid="Base_Column_List" />
    ,Sys_Employee.*,Sys_Employee.id as 'Eid'
    from Sys_Department Left join Sys_Employee on  Sys_Employee.department_id=Sys_Department.id
    <where>
    	<if test="id!=null">
    		 Sys_Department.id=#{id,jdbcType=BIGINT}
    	</if>
    	<if test="domainId!=null">
    		Sys_Department.domainId=#{domainId,jdbcType=BIGINT}
    	</if>
    </where>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from Sys_Department
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from Sys_Department
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <insert id="insert" keyColumn="id" keyProperty="id" parameterType="com.highmind.entity.Department" useGeneratedKeys="true">
    insert into Sys_Department (domainId, ml_parent, name, 
      remark)
    values (#{domainId,jdbcType=BIGINT}, #{ml_parent,jdbcType=BIGINT}, #{name,jdbcType=VARCHAR}, 
      #{remark,jdbcType=VARCHAR})
  </insert>
  <insert  id="insertSelective" keyColumn="id" keyProperty="id" parameterType="com.highmind.entity.Department" useGeneratedKeys="true">
    insert into Sys_Department
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="domainId != null">
        domainId,
      </if>
      <if test="ml_parent != null">
        ml_parent,
      </if>
      <if test="name != null">
        name,
      </if>
      <if test="remark != null">
        remark,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="domainId != null">
        #{domainId,jdbcType=BIGINT},
      </if>
      <if test="ml_parent != null">
        #{ml_parent,jdbcType=BIGINT},
      </if>
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="remark != null">
        #{remark,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.highmind.entity.Department">
    update Sys_Department
    <set>
      <if test="domainId != null">
        domainId = #{domainId,jdbcType=BIGINT},
      </if>
      <if test="ml_parent != null">
        ml_parent = #{ml_parent,jdbcType=BIGINT},
      </if>
      <if test="name != null">
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="remark != null">
        remark = #{remark,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.highmind.entity.Department">
    update Sys_Department
    set domainId = #{domainId,jdbcType=BIGINT},
      ml_parent = #{ml_parent,jdbcType=BIGINT},
      name = #{name,jdbcType=VARCHAR},
      remark = #{remark,jdbcType=VARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>
 	<!--  查询部门名字 -->
  <select id="selectDepartmentName" resultType="com.highmind.entity.Department">
  	select 
    <include refid="Base_Column_List" />
    from Sys_Department
  </select>
  <resultMap type="com.highmind.entity.Department" id="recursionMenuMap">
		<id column="id" jdbcType="BIGINT" property="id" />
		<result column="domainId" jdbcType="BIGINT" property="domainId" />
		<result column="ml_parent" jdbcType="BIGINT" property="ml_parent" />
		<result column="name" jdbcType="VARCHAR" property="name" />
		<result column="remark" jdbcType="VARCHAR" property="remark" />
      	<collection property="children" ofType="com.highmind.entity.Department" column="id" select="findDepartmentByParentId"/>
  </resultMap>
	<!-- 递归查询部门 -->
    <select id="findAllRecursion" resultMap="recursionMenuMap">
    	select 
    	<include refid="Base_Column_List" />
    	From Sys_Department WHERE ml_parent='' or ml_parent is NULL or ml_parent=0
    </select>
    <!-- 查询父部门下的子部门 -->
    <select id="findDepartmentByParentId" resultType="com.highmind.entity.Department">
    	select 
    	<include refid="Base_Column_List" />
    	From Sys_Department WHERE ml_parent=#{id} 
    </select>
</mapper>